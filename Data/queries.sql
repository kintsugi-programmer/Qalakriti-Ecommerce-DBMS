-- Query 1: Select all users and their addresses
SELECT usr.*, addr.*
FROM `User` usr
JOIN Address addr ON usr.usrID = addr.usrID;

-- Query 2: Find the total number of products in each category
SELECT cat.catName, COUNT(prod.prodID) AS productCount
FROM Category cat
LEFT JOIN Product prod ON cat.catID = prod.catID
GROUP BY cat.catID, cat.catName;

-- Query 3: Retrieve craftsman details along with their total products sold
SELECT crafts.craftName, COUNT(ordItem.prodID) AS totalProductsSold
FROM Craftsman crafts
LEFT JOIN Product prod ON crafts.craftID = prod.craftID
LEFT JOIN OrderItem ordItem ON prod.prodID = ordItem.prodID
GROUP BY crafts.craftID, crafts.craftName;

-- Query 4: Find the average rating of products in each category
SELECT cat.catName, AVG(rev.revRating) AS avgRating
FROM Category cat
LEFT JOIN Product prod ON cat.catID = prod.catID
LEFT JOIN Review rev ON prod.prodID = rev.prodID
GROUP BY cat.catID, cat.catName;

-- Query 5: Retrieve details of orders with their respective items
SELECT ord.*, ordItem.*, prod.prodName
FROM `Order` ord
JOIN OrderItem ordItem ON ord.ordID = ordItem.ordID
JOIN Product prod ON ordItem.prodID = prod.prodID;

-- Query 6: Find the total revenue generated by each craftsman
SELECT crafts.craftName, SUM(ordItem.itemSubtotal) AS totalRevenue
FROM Craftsman crafts
LEFT JOIN Product prod ON crafts.craftID = prod.craftID
LEFT JOIN OrderItem ordItem ON prod.prodID = ordItem.prodID
GROUP BY crafts.craftID, crafts.craftName;

-- Query 7: Retrieve users who have not placed any orders
SELECT usr.*
FROM `User` usr
LEFT JOIN `Order` ord ON usr.usrID = ord.usrID
WHERE ord.usrID IS NULL;

-- Query 8: List all products with their respective categories and craftsmen
SELECT prod.*, cat.catName, crafts.craftName
FROM Product prod
JOIN Category cat ON prod.catID = cat.catID
JOIN Craftsman crafts ON prod.craftID = crafts.craftID;

-- Query 9: Find the latest order for each user
SELECT usr.*, ord.*
FROM `User` usr
LEFT JOIN `Order` ord ON usr.usrID = ord.usrID
WHERE ord.ordDate = (SELECT MAX(ordDate) FROM `Order` WHERE usrID = usr.usrID);

-- Query 10: Retrieve products that have not received any reviews
SELECT prod.*
FROM Product prod
LEFT JOIN Review rev ON prod.prodID = rev.prodID
WHERE rev.revID IS NULL;

-- Query 11: Retrieve the products that have not been ordered yet
SELECT prod.*
FROM Product prod
LEFT JOIN OrderItem ordItem ON prod.prodID = ordItem.prodID
WHERE ordItem.prodID IS NULL;

-- Query 12: Update the stock of a specific product
UPDATE Product
SET prodStock = prodStock - 10
WHERE prodID = 3;

-- Query 13: Calculate the average order amount for each user
SELECT usr.usrID, usr.usrName, AVG(ord.ordTotalAmt) AS avgOrderAmount
FROM `User` usr
LEFT JOIN `Order` ord ON usr.usrID = ord.usrID
GROUP BY usr.usrID, usr.usrName;

-- Query 14: Retrieve the most recent order for each product
SELECT prod.*, ord.*
FROM Product prod
LEFT JOIN OrderItem ordItem ON prod.prodID = ordItem.prodID
LEFT JOIN `Order` ord ON ordItem.ordID = ord.ordID
WHERE ord.ordDate = (SELECT MAX(ordDate) FROM `Order` WHERE ordItem.prodID = prod.prodID);

-- Query 15: Delete users who have not placed any orders
DELETE FROM `User`
WHERE usrID NOT IN (SELECT DISTINCT usrID FROM `Order`);

-- Query 16: Find the craftsman who has not sold any products
SELECT crafts.craftName
FROM Craftsman crafts
LEFT JOIN Product prod ON crafts.craftID = prod.craftID
WHERE prod.prodID IS NULL;

-- Query 17: Calculate the total number of reviews for each product
SELECT prod.prodName, COUNT(rev.revID) AS totalReviews
FROM Product prod
LEFT JOIN Review rev ON prod.prodID = rev.prodID
GROUP BY prod.prodID, prod.prodName;

-- Query 18: Retrieve orders with a specific status
SELECT ord.*
FROM `Order` ord
WHERE ord.ordStatus = 'Shipped';

-- Query 19: Identify users who placed orders in the first quarter of the year
SELECT usr.*
FROM `User` usr
JOIN `Order` ord ON usr.usrID = ord.usrID
WHERE EXTRACT(QUARTER FROM ord.ordDate) = 1;

-- Query 20: Insert a new category into the database
INSERT INTO Category (catName)
VALUES ('Ceramics');
